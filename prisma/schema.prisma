// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email        String  @unique
  password     String
  refreshToken String?

  name    String
  avatar  String?
  address UserAddress?

  clients  Client[]
  invoices Invoice[]

  @@map("users")
}

model UserAddress {
  id Int @id @default(autoincrement())

  street   String
  city     String
  postCode String
  country  String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  @@map("user-addresses")
}

model Client {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logo     String?
  name     String
  email    String
  comment  String?
  address  ClientAddress?
  turnover Float          @default(0)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@map("clients")
}

model ClientAddress {
  id Int @id @default(autoincrement())

  street   String
  city     String
  postCode String
  country  String

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId Int    @unique

  @@map("client-addresses")
}

model Invoice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code  String           @unique
  from  InvoiceSender?
  to    InvoiceReceiver?
  terms InvoiceTerms?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@map("invoices")
}

model InvoiceSender {
  id Int @id @default(autoincrement())

  address InvoiceSenderAddress?

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId Int     @unique

  @@map("invoice-senders")
}

model InvoiceSenderAddress {
  id Int @id @default(autoincrement())

  street   String
  city     String
  postCode String
  country  String

  invoiceSender   InvoiceSender @relation(fields: [invoiceSenderId], references: [id], onDelete: Cascade)
  invoiceSenderId Int           @unique

  @@map("invoice-sender-addresses")
}

model InvoiceReceiver {
  id Int @id @default(autoincrement())

  name    String
  email   String
  address InvoiceReceiverAddress?

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId Int     @unique

  @@map("invoice-receivers")
}

model InvoiceReceiverAddress {
  id Int @id @default(autoincrement())

  street   String
  city     String
  postCode String
  country  String

  invoiceReceiver   InvoiceReceiver @relation(fields: [invoiceReceiverId], references: [id], onDelete: Cascade)
  invoiceReceiverId Int             @unique

  @@map("invoice-receiver-addresses")
}

model InvoiceTerms {
  id Int @id @default(autoincrement())

  dueDate     DateTime
  description String?
  items       Json[]
  amountDue   Float

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId Int     @unique

  @@map("invoice-terms")
}
